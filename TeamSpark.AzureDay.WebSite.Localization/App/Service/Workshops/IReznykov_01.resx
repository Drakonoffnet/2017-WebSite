<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>&lt;div class="row text-left"&gt;
    &lt;div class="col-md-4"&gt;
        &lt;ol type="1"&gt;
            &lt;li&gt;
                Introduction:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li&gt;Acquaintance;&lt;/li&gt;
                    &lt;li&gt;Course overview;&lt;/li&gt;
                    &lt;li&gt;Set up environment, check required software.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                Prepare environment:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Create Azure resource group;&lt;/li&gt;
                    &lt;li&gt;Create Azure storage;&lt;/li&gt;
                    &lt;li&gt;Create App Service plan;&lt;/li&gt;
                    &lt;li&gt;Check AAD.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                Data source and model library:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Create Azure SQL server;&lt;/li&gt;
                    &lt;li&gt;Create database project;&lt;/li&gt;
                    &lt;li&gt;Deploy to Azure SQL database as data-tier application;&lt;/li&gt;
                    &lt;li&gt;Connect to SQL Azure from Visual Studio, check data;&lt;/li&gt;
                    &lt;li&gt;Create class library;&lt;/li&gt;
                    &lt;li&gt;Add data models with Entity Framework.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                API app - basic:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li&gt;Overview;&lt;/li&gt;
                    &lt;li&gt;Types of web apps, app plan, pricing;&lt;/li&gt;
                    &lt;li&gt;Create App plan and API app;&lt;/li&gt;
                    &lt;li&gt;Tune swagger package;&lt;/li&gt;
                    &lt;li&gt;Launch local instance, deploy to Azure.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
    &lt;div class="col-md-4"&gt;
        &lt;ol type="1"&gt;
            &lt;li value="5"&gt;
                API app - intermediate:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li&gt;Add models from SQL database;&lt;/li&gt;
                    &lt;li&gt;Create new controllers;&lt;/li&gt;
                    &lt;li&gt;Deploy to Azure;&lt;/li&gt;
                    &lt;li&gt;Create Asp.Net MVC site as consumer;&lt;/li&gt;
                    &lt;li&gt;Add Rest service;&lt;/li&gt;
                    &lt;li&gt;Deploy Asp.Net MVC site to Azure;&lt;/li&gt;
                    &lt;li&gt;Check Rest API.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                Web jobs - basics:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Overview;&lt;/li&gt;
                    &lt;li&gt;Create console application that convert images;&lt;/li&gt;
                    &lt;li&gt;Update application to convert image in storage;&lt;/li&gt;
                    &lt;li&gt;Discuss possible triggers;&lt;/li&gt;
                    &lt;li&gt;Convert console application to web job;&lt;/li&gt;
                    &lt;li&gt;Deploy to API app to Azure;&lt;/li&gt;
                    &lt;li&gt;Check web job.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
    &lt;div class="col-md-4"&gt;
        &lt;ol type="1"&gt;
            &lt;li value="7"&gt;
                Web jobs - intermediate:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Add logging;&lt;/li&gt;
                    &lt;li&gt;Add async methods;&lt;/li&gt;
                    &lt;li&gt;Debug web jobs.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                API app - advanced:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Add authentication with Easy Auth;&lt;/li&gt;
                    &lt;li&gt;Create AAD application;&lt;/li&gt;
                    &lt;li&gt;Add authorize attribute.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;
                Web jobs - advanced:
                &lt;ol type="a" style="margin-left: 15px; margin-bottom: 10px;"&gt;
                    &lt;li value="1"&gt;Create new web job with trigger;&lt;/li&gt;
                    &lt;li&gt;Consume API app from web job;&lt;/li&gt;
                    &lt;li&gt;Create AAD application for web job;&lt;/li&gt;
                    &lt;li&gt;Check results.&lt;/li&gt;
                &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;Conclusions.&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Create Api App with authentication and web jobs</value>
  </data>
</root>